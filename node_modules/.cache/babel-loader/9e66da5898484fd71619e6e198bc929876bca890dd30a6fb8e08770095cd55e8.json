{"ast":null,"code":"import axios from \"axios\";\nconst CLIENT_ID = \"357c0850169f419ca90f2f829e8f1705\"; // Spotify Client ID\nconst CLIENT_SECRET = \"fde7b5ac4d6b4c94b08afb01987adee1\"; // Spotify Client Secret\nconst TOKEN_URL = \"https://accounts.spotify.com/api/token\";\nconst SEARCH_URL = \"https://api.spotify.com/v1/search\";\nlet accessToken = null;\nconst getAccessToken = async () => {\n  // 이미 저장된 토큰이 있다면 그대로 반환\n  if (accessToken) return accessToken;\n  try {\n    const response = await axios.post(TOKEN_URL, new URLSearchParams({\n      grant_type: \"client_credentials\"\n    }), {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        Authorization: `Basic ${btoa(`${CLIENT_ID}:${CLIENT_SECRET}`)}`\n      }\n    });\n    accessToken = response.data.access_token;\n    console.log(\"Access token fetched successfully:\", accessToken); // 디버깅용\n    return accessToken;\n  } catch (error) {\n    console.error(\"Error fetching access token:\", error);\n    throw new Error(\"Failed to fetch access token.\");\n  }\n};\nexport const searchTracks = async query => {\n  const token = await getAccessToken();\n  try {\n    const response = await axios.get(SEARCH_URL, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      params: {\n        q: query,\n        type: \"track\",\n        limit: 10 // 결과 갯수 제한\n      }\n    });\n\n    // Spotify API에서 반환된 트랙 데이터를 로그로 출력\n    console.log(\"Search results:\", response.data.tracks.items);\n    return response.data.tracks.items;\n  } catch (error) {\n    console.error(\"Error fetching search results:\", error);\n    throw new Error(\"Failed to fetch search results.\");\n  }\n};","map":{"version":3,"names":["axios","CLIENT_ID","CLIENT_SECRET","TOKEN_URL","SEARCH_URL","accessToken","getAccessToken","response","post","URLSearchParams","grant_type","headers","Authorization","btoa","data","access_token","console","log","error","Error","searchTracks","query","token","get","params","q","type","limit","tracks","items"],"sources":["/Users/leeyunji/Desktop/24-2/FFFinal_github/src/services/SpotifyService.js"],"sourcesContent":["import axios from \"axios\";\n\nconst CLIENT_ID = \"357c0850169f419ca90f2f829e8f1705\"; // Spotify Client ID\nconst CLIENT_SECRET = \"fde7b5ac4d6b4c94b08afb01987adee1\"; // Spotify Client Secret\nconst TOKEN_URL = \"https://accounts.spotify.com/api/token\";\nconst SEARCH_URL = \"https://api.spotify.com/v1/search\";\n\nlet accessToken = null;\n\nconst getAccessToken = async () => {\n  // 이미 저장된 토큰이 있다면 그대로 반환\n  if (accessToken) return accessToken;\n\n  try {\n    const response = await axios.post(\n      TOKEN_URL,\n      new URLSearchParams({ grant_type: \"client_credentials\" }),\n      {\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n          Authorization: `Basic ${btoa(`${CLIENT_ID}:${CLIENT_SECRET}`)}`,\n        },\n      }\n    );\n\n    accessToken = response.data.access_token;\n    console.log(\"Access token fetched successfully:\", accessToken); // 디버깅용\n    return accessToken;\n  } catch (error) {\n    console.error(\"Error fetching access token:\", error);\n    throw new Error(\"Failed to fetch access token.\");\n  }\n};\n\nexport const searchTracks = async (query) => {\n  const token = await getAccessToken();\n\n  try {\n    const response = await axios.get(SEARCH_URL, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      params: {\n        q: query,\n        type: \"track\",\n        limit: 10, // 결과 갯수 제한\n      },\n    });\n\n    // Spotify API에서 반환된 트랙 데이터를 로그로 출력\n    console.log(\"Search results:\", response.data.tracks.items);\n    return response.data.tracks.items;\n  } catch (error) {\n    console.error(\"Error fetching search results:\", error);\n    throw new Error(\"Failed to fetch search results.\");\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,SAAS,GAAG,kCAAkC,CAAC,CAAC;AACtD,MAAMC,aAAa,GAAG,kCAAkC,CAAC,CAAC;AAC1D,MAAMC,SAAS,GAAG,wCAAwC;AAC1D,MAAMC,UAAU,GAAG,mCAAmC;AAEtD,IAAIC,WAAW,GAAG,IAAI;AAEtB,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACjC;EACA,IAAID,WAAW,EAAE,OAAOA,WAAW;EAEnC,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAC/BL,SAAS,EACT,IAAIM,eAAe,CAAC;MAAEC,UAAU,EAAE;IAAqB,CAAC,CAAC,EACzD;MACEC,OAAO,EAAE;QACP,cAAc,EAAE,mCAAmC;QACnDC,aAAa,EAAE,SAASC,IAAI,CAAC,GAAGZ,SAAS,IAAIC,aAAa,EAAE,CAAC;MAC/D;IACF,CACF,CAAC;IAEDG,WAAW,GAAGE,QAAQ,CAACO,IAAI,CAACC,YAAY;IACxCC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEZ,WAAW,CAAC,CAAC,CAAC;IAChE,OAAOA,WAAW;EACpB,CAAC,CAAC,OAAOa,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;EAClD;AACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAG,MAAOC,KAAK,IAAK;EAC3C,MAAMC,KAAK,GAAG,MAAMhB,cAAc,CAAC,CAAC;EAEpC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACuB,GAAG,CAACnB,UAAU,EAAE;MAC3CO,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUU,KAAK;MAChC,CAAC;MACDE,MAAM,EAAE;QACNC,CAAC,EAAEJ,KAAK;QACRK,IAAI,EAAE,OAAO;QACbC,KAAK,EAAE,EAAE,CAAE;MACb;IACF,CAAC,CAAC;;IAEF;IACAX,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEV,QAAQ,CAACO,IAAI,CAACc,MAAM,CAACC,KAAK,CAAC;IAC1D,OAAOtB,QAAQ,CAACO,IAAI,CAACc,MAAM,CAACC,KAAK;EACnC,CAAC,CAAC,OAAOX,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;EACpD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}