{"ast":null,"code":"import axios from \"axios\";\nconst CLIENT_ID = \"357c0850169f419ca90f2f829e8f1705\"; // Spotify Client ID\nconst CLIENT_SECRET = \"fde7b5ac4d6b4c94b08afb01987adee1\"; // Spotify Client Secret\nconst TOKEN_URL = \"https://accounts.spotify.com/api/token\";\nconst SEARCH_URL = \"https://api.spotify.com/v1/search\";\nlet accessToken = null;\nconst getAccessToken = async () => {\n  if (accessToken) return accessToken;\n  try {\n    const response = await axios.post(TOKEN_URL, new URLSearchParams({\n      grant_type: \"client_credentials\"\n    }), {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        Authorization: `Basic ${btoa(`${CLIENT_ID}:${CLIENT_SECRET}`)}`\n      }\n    });\n    accessToken = response.data.access_token;\n    return accessToken;\n  } catch (error) {\n    console.error(\"Error fetching access token:\", error);\n    throw new Error(\"Failed to fetch access token.\");\n  }\n};\nexport const searchTracks = async query => {\n  const token = await getAccessToken();\n  try {\n    const response = await axios.get(SEARCH_URL, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      params: {\n        q: query,\n        type: \"track\",\n        limit: 10\n      }\n    });\n\n    // 필요한 7개의 데이터를 추출하여 반환\n    return response.data.tracks.items.map(track => {\n      var _track$artists$, _track$album$images$;\n      return {\n        id: track.id,\n        name: track.name,\n        artist: (_track$artists$ = track.artists[0]) === null || _track$artists$ === void 0 ? void 0 : _track$artists$.name,\n        album: track.album.name,\n        image: (_track$album$images$ = track.album.images[0]) === null || _track$album$images$ === void 0 ? void 0 : _track$album$images$.url,\n        releaseDate: track.album.release_date,\n        previewUrl: track.preview_url,\n        duration: track.duration_ms\n      };\n    });\n  } catch (error) {\n    console.error(\"Error fetching search results:\", error);\n    throw new Error(\"Failed to fetch search results.\");\n  }\n};","map":{"version":3,"names":["axios","CLIENT_ID","CLIENT_SECRET","TOKEN_URL","SEARCH_URL","accessToken","getAccessToken","response","post","URLSearchParams","grant_type","headers","Authorization","btoa","data","access_token","error","console","Error","searchTracks","query","token","get","params","q","type","limit","tracks","items","map","track","_track$artists$","_track$album$images$","id","name","artist","artists","album","image","images","url","releaseDate","release_date","previewUrl","preview_url","duration","duration_ms"],"sources":["/Users/leeyunji/Desktop/24-2/FFFinal_github/src/services/SpotifyService.js"],"sourcesContent":["import axios from \"axios\";\n\nconst CLIENT_ID = \"357c0850169f419ca90f2f829e8f1705\"; // Spotify Client ID\nconst CLIENT_SECRET = \"fde7b5ac4d6b4c94b08afb01987adee1\"; // Spotify Client Secret\nconst TOKEN_URL = \"https://accounts.spotify.com/api/token\";\nconst SEARCH_URL = \"https://api.spotify.com/v1/search\";\n\nlet accessToken = null;\n\nconst getAccessToken = async () => {\n  if (accessToken) return accessToken;\n\n  try {\n    const response = await axios.post(\n      TOKEN_URL,\n      new URLSearchParams({ grant_type: \"client_credentials\" }),\n      {\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n          Authorization: `Basic ${btoa(`${CLIENT_ID}:${CLIENT_SECRET}`)}`,\n        },\n      }\n    );\n\n    accessToken = response.data.access_token;\n    return accessToken;\n  } catch (error) {\n    console.error(\"Error fetching access token:\", error);\n    throw new Error(\"Failed to fetch access token.\");\n  }\n};\n\nexport const searchTracks = async (query) => {\n  const token = await getAccessToken();\n\n  try {\n    const response = await axios.get(SEARCH_URL, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      params: {\n        q: query,\n        type: \"track\",\n        limit: 10,\n      },\n    });\n\n    // 필요한 7개의 데이터를 추출하여 반환\n    return response.data.tracks.items.map((track) => ({\n      id: track.id,\n      name: track.name,\n      artist: track.artists[0]?.name,\n      album: track.album.name,\n      image: track.album.images[0]?.url,\n      releaseDate: track.album.release_date,\n      previewUrl: track.preview_url,\n      duration: track.duration_ms,\n    }));\n  } catch (error) {\n    console.error(\"Error fetching search results:\", error);\n    throw new Error(\"Failed to fetch search results.\");\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,SAAS,GAAG,kCAAkC,CAAC,CAAC;AACtD,MAAMC,aAAa,GAAG,kCAAkC,CAAC,CAAC;AAC1D,MAAMC,SAAS,GAAG,wCAAwC;AAC1D,MAAMC,UAAU,GAAG,mCAAmC;AAEtD,IAAIC,WAAW,GAAG,IAAI;AAEtB,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACjC,IAAID,WAAW,EAAE,OAAOA,WAAW;EAEnC,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAC/BL,SAAS,EACT,IAAIM,eAAe,CAAC;MAAEC,UAAU,EAAE;IAAqB,CAAC,CAAC,EACzD;MACEC,OAAO,EAAE;QACP,cAAc,EAAE,mCAAmC;QACnDC,aAAa,EAAE,SAASC,IAAI,CAAC,GAAGZ,SAAS,IAAIC,aAAa,EAAE,CAAC;MAC/D;IACF,CACF,CAAC;IAEDG,WAAW,GAAGE,QAAQ,CAACO,IAAI,CAACC,YAAY;IACxC,OAAOV,WAAW;EACpB,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAM,IAAIE,KAAK,CAAC,+BAA+B,CAAC;EAClD;AACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAG,MAAOC,KAAK,IAAK;EAC3C,MAAMC,KAAK,GAAG,MAAMf,cAAc,CAAC,CAAC;EAEpC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACsB,GAAG,CAAClB,UAAU,EAAE;MAC3CO,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUS,KAAK;MAChC,CAAC;MACDE,MAAM,EAAE;QACNC,CAAC,EAAEJ,KAAK;QACRK,IAAI,EAAE,OAAO;QACbC,KAAK,EAAE;MACT;IACF,CAAC,CAAC;;IAEF;IACA,OAAOnB,QAAQ,CAACO,IAAI,CAACa,MAAM,CAACC,KAAK,CAACC,GAAG,CAAEC,KAAK;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MAAA,OAAM;QAChDC,EAAE,EAAEH,KAAK,CAACG,EAAE;QACZC,IAAI,EAAEJ,KAAK,CAACI,IAAI;QAChBC,MAAM,GAAAJ,eAAA,GAAED,KAAK,CAACM,OAAO,CAAC,CAAC,CAAC,cAAAL,eAAA,uBAAhBA,eAAA,CAAkBG,IAAI;QAC9BG,KAAK,EAAEP,KAAK,CAACO,KAAK,CAACH,IAAI;QACvBI,KAAK,GAAAN,oBAAA,GAAEF,KAAK,CAACO,KAAK,CAACE,MAAM,CAAC,CAAC,CAAC,cAAAP,oBAAA,uBAArBA,oBAAA,CAAuBQ,GAAG;QACjCC,WAAW,EAAEX,KAAK,CAACO,KAAK,CAACK,YAAY;QACrCC,UAAU,EAAEb,KAAK,CAACc,WAAW;QAC7BC,QAAQ,EAAEf,KAAK,CAACgB;MAClB,CAAC;IAAA,CAAC,CAAC;EACL,CAAC,CAAC,OAAO9B,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAM,IAAIE,KAAK,CAAC,iCAAiC,CAAC;EACpD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}