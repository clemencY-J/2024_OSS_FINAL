{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { searchTracks } from \"../services/SpotifyService\";\nimport { addTrackToPlaylist } from \"../services/PlaylistService\";\nimport SearchResults from \"./SearchResults\";\nimport \"./SearchPage.css\";\nconst SearchPage = ({\n  updatePlaylist\n}) => {\n  _s();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [tracks, setTracks] = useState([]);\n  const handleSearch = async () => {\n    if (!searchTerm.trim()) {\n      alert(\"Please enter a search term.\");\n      return;\n    }\n    try {\n      const results = await searchTracks(searchTerm);\n      setTracks(results);\n    } catch (error) {\n      console.error(\"Error fetching search results:\", error);\n      alert(\"Failed to fetch search results. Please try again.\");\n    }\n  };\n};\n_s(SearchPage, \"hLT5UG8HRZheL8IGUxWmmmBm1yk=\");\n_c = SearchPage;\nconst handleAddTrack = async track => {\n  try {\n    var _track$artists$, _track$album$images$;\n    const addedTrack = await addTrackToPlaylist({\n      name: track.name,\n      artist: (_track$artists$ = track.artists[0]) === null || _track$artists$ === void 0 ? void 0 : _track$artists$.name,\n      image: (_track$album$images$ = track.album.images[0]) === null || _track$album$images$ === void 0 ? void 0 : _track$album$images$.url,\n      audioUrl: track.preview_url\n    });\n\n    // 성공적으로 추가된 경우 상태 업데이트 및 알림 표시\n    updateSidebar(prevPlaylist => [...prevPlaylist, addedTrack]);\n    alert(`Track \"${addedTrack.name}\" by ${addedTrack.artist} added to the playlist!`);\n  } catch (error) {\n    console.error(\"Error adding track:\", error);\n    alert(\"Failed to add track to the playlist.\");\n  }\n};\nexport default SearchPage;\nvar _c;\n$RefreshReg$(_c, \"SearchPage\");","map":{"version":3,"names":["React","useState","searchTracks","addTrackToPlaylist","SearchResults","SearchPage","updatePlaylist","_s","searchTerm","setSearchTerm","tracks","setTracks","handleSearch","trim","alert","results","error","console","_c","handleAddTrack","track","_track$artists$","_track$album$images$","addedTrack","name","artist","artists","image","album","images","url","audioUrl","preview_url","updateSidebar","prevPlaylist","$RefreshReg$"],"sources":["/Users/leeyunji/Desktop/24-2/FFFinal_github/src/components/SearchPage.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { searchTracks } from \"../services/SpotifyService\";\nimport { addTrackToPlaylist } from \"../services/PlaylistService\";\nimport SearchResults from \"./SearchResults\";\nimport \"./SearchPage.css\";\n\nconst SearchPage = ({ updatePlaylist }) => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [tracks, setTracks] = useState([]);\n\n  const handleSearch = async () => {\n    if (!searchTerm.trim()) {\n      alert(\"Please enter a search term.\");\n      return;\n    }\n\n    try {\n      const results = await searchTracks(searchTerm);\n      setTracks(results);\n    } catch (error) {\n      console.error(\"Error fetching search results:\", error);\n      alert(\"Failed to fetch search results. Please try again.\");\n    }\n  };\n}\n\n  const handleAddTrack = async (track) => {\n    try {\n      const addedTrack = await addTrackToPlaylist({\n        name: track.name,\n        artist: track.artists[0]?.name,\n        image: track.album.images[0]?.url,\n        audioUrl: track.preview_url,\n      });\n  \n      // 성공적으로 추가된 경우 상태 업데이트 및 알림 표시\n      updateSidebar((prevPlaylist) => [...prevPlaylist, addedTrack]);\n      alert(`Track \"${addedTrack.name}\" by ${addedTrack.artist} added to the playlist!`);\n    } catch (error) {\n      console.error(\"Error adding track:\", error);\n      alert(\"Failed to add track to the playlist.\");\n    }\n  };\n  \n\nexport default SearchPage;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,YAAY,QAAQ,4BAA4B;AACzD,SAASC,kBAAkB,QAAQ,6BAA6B;AAChE,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAO,kBAAkB;AAEzB,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EACzC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMW,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI,CAACJ,UAAU,CAACK,IAAI,CAAC,CAAC,EAAE;MACtBC,KAAK,CAAC,6BAA6B,CAAC;MACpC;IACF;IAEA,IAAI;MACF,MAAMC,OAAO,GAAG,MAAMb,YAAY,CAACM,UAAU,CAAC;MAC9CG,SAAS,CAACI,OAAO,CAAC;IACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtDF,KAAK,CAAC,mDAAmD,CAAC;IAC5D;EACF,CAAC;AACH,CAAC;AAAAP,EAAA,CAlBKF,UAAU;AAAAa,EAAA,GAAVb,UAAU;AAoBd,MAAMc,cAAc,GAAG,MAAOC,KAAK,IAAK;EACtC,IAAI;IAAA,IAAAC,eAAA,EAAAC,oBAAA;IACF,MAAMC,UAAU,GAAG,MAAMpB,kBAAkB,CAAC;MAC1CqB,IAAI,EAAEJ,KAAK,CAACI,IAAI;MAChBC,MAAM,GAAAJ,eAAA,GAAED,KAAK,CAACM,OAAO,CAAC,CAAC,CAAC,cAAAL,eAAA,uBAAhBA,eAAA,CAAkBG,IAAI;MAC9BG,KAAK,GAAAL,oBAAA,GAAEF,KAAK,CAACQ,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,cAAAP,oBAAA,uBAArBA,oBAAA,CAAuBQ,GAAG;MACjCC,QAAQ,EAAEX,KAAK,CAACY;IAClB,CAAC,CAAC;;IAEF;IACAC,aAAa,CAAEC,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEX,UAAU,CAAC,CAAC;IAC9DT,KAAK,CAAC,UAAUS,UAAU,CAACC,IAAI,QAAQD,UAAU,CAACE,MAAM,yBAAyB,CAAC;EACpF,CAAC,CAAC,OAAOT,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3CF,KAAK,CAAC,sCAAsC,CAAC;EAC/C;AACF,CAAC;AAGH,eAAeT,UAAU;AAAC,IAAAa,EAAA;AAAAiB,YAAA,CAAAjB,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}