{"ast":null,"code":"var _jsxFileName = \"/Users/leeyunji/Desktop/24-2/FFFinal/src/components/SearchPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { searchTracks } from \"../services/SpotifyService\";\nimport SearchResults from \"./SearchResults\";\nimport { addTrackToPlaylist, getPlaylist } from \"../services/PlaylistService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchPage = ({\n  updateSidebar\n}) => {\n  _s();\n  const [tracks, setTracks] = useState([]);\n  const handleSearch = async query => {\n    const results = await searchTracks(query);\n    setTracks(results || []);\n  };\n  const handleAdd = async track => {\n    var _track$artists$, _track$album$images$;\n    await addTrackToPlaylist({\n      id: track.id,\n      name: track.name,\n      artist: (_track$artists$ = track.artists[0]) === null || _track$artists$ === void 0 ? void 0 : _track$artists$.name,\n      image: (_track$album$images$ = track.album.images[0]) === null || _track$album$images$ === void 0 ? void 0 : _track$album$images$.url\n    });\n\n    // MockAPI에서 다시 데이터를 불러와 Sidebar 업데이트\n    const updatedPlaylist = await getPlaylist();\n    updateSidebar(updatedPlaylist);\n    alert(`${track.name} added to playlist!`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search for a song...\",\n      onKeyDown: e => e.key === \"Enter\" && handleSearch(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchResults, {\n      tracks: tracks,\n      onAdd: handleAdd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchPage, \"L1pLig/GVCA9Hd5Koxqlpeo2zIY=\");\n_c = SearchPage;\nexport default SearchPage;\nvar _c;\n$RefreshReg$(_c, \"SearchPage\");","map":{"version":3,"names":["React","useState","searchTracks","SearchResults","addTrackToPlaylist","getPlaylist","jsxDEV","_jsxDEV","SearchPage","updateSidebar","_s","tracks","setTracks","handleSearch","query","results","handleAdd","track","_track$artists$","_track$album$images$","id","name","artist","artists","image","album","images","url","updatedPlaylist","alert","className","children","type","placeholder","onKeyDown","e","key","target","value","fileName","_jsxFileName","lineNumber","columnNumber","onAdd","_c","$RefreshReg$"],"sources":["/Users/leeyunji/Desktop/24-2/FFFinal/src/components/SearchPage.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { searchTracks } from \"../services/SpotifyService\";\nimport SearchResults from \"./SearchResults\";\nimport { addTrackToPlaylist, getPlaylist } from \"../services/PlaylistService\";\n\nconst SearchPage = ({ updateSidebar }) => {\n  const [tracks, setTracks] = useState([]);\n  \n  const handleSearch = async (query) => {\n    const results = await searchTracks(query);\n    setTracks(results || []);\n  };\n\n  const handleAdd = async (track) => {\n    await addTrackToPlaylist({\n      id: track.id,\n      name: track.name,\n      artist: track.artists[0]?.name,\n      image: track.album.images[0]?.url,\n    });\n\n    // MockAPI에서 다시 데이터를 불러와 Sidebar 업데이트\n    const updatedPlaylist = await getPlaylist();\n    updateSidebar(updatedPlaylist);\n    alert(`${track.name} added to playlist!`);\n  };\n\n  return (\n    <div className=\"search-page\">\n      <input\n        type=\"text\"\n        placeholder=\"Search for a song...\"\n        onKeyDown={(e) => e.key === \"Enter\" && handleSearch(e.target.value)}\n      />\n      <SearchResults tracks={tracks} onAdd={handleAdd} />\n    </div>\n  );\n};\n\nexport default SearchPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,YAAY,QAAQ,4BAA4B;AACzD,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,SAASC,kBAAkB,EAAEC,WAAW,QAAQ,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EACxC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMY,YAAY,GAAG,MAAOC,KAAK,IAAK;IACpC,MAAMC,OAAO,GAAG,MAAMb,YAAY,CAACY,KAAK,CAAC;IACzCF,SAAS,CAACG,OAAO,IAAI,EAAE,CAAC;EAC1B,CAAC;EAED,MAAMC,SAAS,GAAG,MAAOC,KAAK,IAAK;IAAA,IAAAC,eAAA,EAAAC,oBAAA;IACjC,MAAMf,kBAAkB,CAAC;MACvBgB,EAAE,EAAEH,KAAK,CAACG,EAAE;MACZC,IAAI,EAAEJ,KAAK,CAACI,IAAI;MAChBC,MAAM,GAAAJ,eAAA,GAAED,KAAK,CAACM,OAAO,CAAC,CAAC,CAAC,cAAAL,eAAA,uBAAhBA,eAAA,CAAkBG,IAAI;MAC9BG,KAAK,GAAAL,oBAAA,GAAEF,KAAK,CAACQ,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,cAAAP,oBAAA,uBAArBA,oBAAA,CAAuBQ;IAChC,CAAC,CAAC;;IAEF;IACA,MAAMC,eAAe,GAAG,MAAMvB,WAAW,CAAC,CAAC;IAC3CI,aAAa,CAACmB,eAAe,CAAC;IAC9BC,KAAK,CAAC,GAAGZ,KAAK,CAACI,IAAI,qBAAqB,CAAC;EAC3C,CAAC;EAED,oBACEd,OAAA;IAAKuB,SAAS,EAAC,aAAa;IAAAC,QAAA,gBAC1BxB,OAAA;MACEyB,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,sBAAsB;MAClCC,SAAS,EAAGC,CAAC,IAAKA,CAAC,CAACC,GAAG,KAAK,OAAO,IAAIvB,YAAY,CAACsB,CAAC,CAACE,MAAM,CAACC,KAAK;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrE,CAAC,eACFnC,OAAA,CAACJ,aAAa;MAACQ,MAAM,EAAEA,MAAO;MAACgC,KAAK,EAAE3B;IAAU;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChD,CAAC;AAEV,CAAC;AAAChC,EAAA,CAhCIF,UAAU;AAAAoC,EAAA,GAAVpC,UAAU;AAkChB,eAAeA,UAAU;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}